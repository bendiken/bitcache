\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename bitcache.info
@finalout
@include version.texi
@settitle Bitcache Manual @value{VERSION}
@documentencoding UTF-8
@comment %**end of header

@dircategory Software libraries
@direntry
* Bitcache: (bitcache).       A content-addressable storage system.
@end direntry

@copying
This manual is in the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute
this manual for any purpose, commercial or non-commercial, and by any means.
@end copying

@titlepage
@title Bitcache
@subtitle for version @value{VERSION}, @value{UPDATED-MONTH}
@author by Arto Bendiken (@email{arto@@bendiken.net})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Bitcache Manual
@end ifnottex

@menu
* Overview of Bitcache::
* Bitcache Data Structures::
* Developing with Bitcache::
* Concept Index::
* Function and Type Index::
@end menu

@comment *********************************************************************

@node Overview of Bitcache
@chapter Overview of Bitcache

Bitcache is a portable C library for implementing content-addressable
storage systems.

@section Installation

TODO

@section Headers and Libraries
@cindex header files
@cindex shared libraries

All declarations needed to develop with Bitcache are collected in the
include file @code{bitcache.h}, which can be used with both C and C++
compilers.

@example
#include <bitcache.h>
@end example

@section Memory Management
@cindex memory management
@findex malloc

In general, @code{libbitcache} does not dynamically allocate any memory.
Choosing a memory-management strategy, whether based on
@code{malloc()}/@code{free()} or garbage collection, is explicitly left up
to the users of the library.

@section Error Handling
@cindex error handling
@findex errno

Most @code{libbitcache} functions return a signed integer value, wherein a
negative value indicates that the function call failed due to an error. The
returned value is equivalent to @code{-errno}.

The following standard error codes may be returned by @code{libbitcache}
functions:

@table @code
@findex EINVAL
@item EINVAL
invalid argument
@findex ENOMEM
@item ENOMEM
cannot allocate memory
@findex EOVERFLOW
@item EOVERFLOW
buffer overflow
@end table

Other standard error codes not listed above may be returned where they are
percolated up from a failed standard library call or system call.

@subsection Assertions
@cindex assertions
@findex assert

@code{libbitcache} functions will never @code{assert()} when supplied with
incorrect or invalid input. Rather, they will return @code{-EINVAL} and set
@code{errno} accordingly.

@section Thread Safety
@cindex thread safety
@cindex locking

When compiled with the @code{-DMT} preprocessor flag, all @code{libbitcache}
data structures will automatically be synchronized to ensure thread safety.

@comment *********************************************************************

@node Bitcache Data Structures
@chapter Bitcache Data Structures
@cindex data structures

This chapter describes the various data structures provided by Bitcache.

@comment ---------------------------------------------------------------------

@section Bitcache Blocks
@cindex block

TODO

Bitcache blocks can optionally be stored in compressed and/or encrypted form.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@subsection Limitations

The minimum block size is zero bytes, and the maximum block size
@math{2^64 - 1} bytes (about 18 exabytes).

@comment ---------------------------------------------------------------------

@section Bitcache Identifiers
@cindex identifier

Bitcache identifiers uniquely identify blocks using a cryptographic
fingerprint.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@comment ---------------------------------------------------------------------

@section Bitcache Lists
@cindex list

Bitcache lists can be used e.g. to maintain block lists for file systems
implemented on top of Bitcache.

Bitcache lists are presently implemented using singly-linked lists.

@subsection Time complexity

The time complexity for obtaining the length of a list is @code{O(n)}.

The time complexity for inserting an identifier into a list is @code{O(1)}
at the head of the list and @code{O(n)} at the tail of the list.

The time complexity for testing whether a list includes an identifier is
@code{O(n)}.

@subsection Space requirements

TODO

@comment ---------------------------------------------------------------------

@section Bitcache Queues
@cindex queue

TODO

Bitcache queues are implemented using doubly-linked lists.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@comment ---------------------------------------------------------------------

@section Bitcache Filters
@cindex Bloom filter
@cindex filter

Bitcache implements Bloom filters for recognizing Bitcache identifiers.

Bloom filters are space-efficient probabilistic data structures used to test
whether an element is a member of a set. False positives are possible, but
false negatives are not. Elements can be added to the set, but not removed.
The more elements that are added to the set, the larger the probability of
false positives.

@subsection Characteristics

@subsubsection False positive probability

@math{}

@subsection Time complexity
@cindex MD5
@cindex SHA-1
@cindex SHA-256

The time needed to either add an identifier or to check whether an
identifier is a member of the set is a fixed constant, @code{O(k)},
completely independent of the number of identifiers already in the set.

The constant @code{k} is proportional to the length of the specific type of
identifier used; @code{k=4} for MD5 identifiers, @code{k=5} for SHA-1
identifiers, and @code{k=8} for SHA-256 identifiers.

@subsection Space requirements

The Bitcache implementation of Bloom filters is tuned to by default use 8
bits per element, giving a fixed false positive probability of around 2%.

@subsection Limitations

Identifiers can't be removed from a filter except by recreating the filter
afresh. This could be addressed by implementing a counting Bloom filter, but
that would add complexity as well as quadruple the space requirements of
filters. Still, counting filters may be provided as an option in the future
if there is demand for the feature.

@comment ---------------------------------------------------------------------

@section Bitcache Sets
@cindex set

TODO

Bitcache sets are presently implemented using a hash table.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@comment ---------------------------------------------------------------------

@section Bitcache Maps
@cindex map

TODO

Bitcache maps are presently implemented using a hash table.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@comment ---------------------------------------------------------------------

@section Bitcache Indexes
@cindex index

Bitcache indexes are maps of Bitcache identifiers to sets of identifiers.

Bitcache indexes are presently implemented using a hash table.

@subsection Time complexity

TODO

@subsection Space requirements

TODO

@comment *********************************************************************

@node Developing with Bitcache
@chapter Developing with Bitcache

@comment ---------------------------------------------------------------------

@section Computing Identifiers
@findex bitcache_id_t

@deftypefn {Function} int bitcache_id_init (bitcache_id_t* @var{id}, uint8_t* @var{digest})
@end deftypefn

@deftypefn {Function} ssize_t bitcache_id_parse (bitcache_id_t* @var{id}, char* @var{hexstring})
@end deftypefn

@deftypefn {Function} ssize_t bitcache_id_serialize (bitcache_id_t* @var{id}, char* @var{buffer}, size_t @var{buffer_size})
@end deftypefn

@deftypefn {Function} int bitcache_id_clear (bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_id_fill (bitcache_id_t* @var{id}, uint8_t @var{value})
@end deftypefn

@deftypefn {Function} bool bitcache_id_equal (bitcache_id_t* @var{id1}, bitcache_id_t* @var{id2})
@end deftypefn

@deftypefn {Function} int bitcache_id_compare (bitcache_id_t* @var{id1}, bitcache_id_t* @var{id2})
@end deftypefn

@deftypefn {Function} uint32_t bitcache_id_hash (bitcache_id_t* @var{id})
@end deftypefn

@comment ---------------------------------------------------------------------

@section Using Filters
@findex bitcache_filter_t
@findex bitcache_filter_op_t

@deftypefn {Function} int bitcache_filter_init (bitcache_filter_t* @var{filter}, size_t @var{size})
@end deftypefn

@deftypefn {Function} int bitcache_filter_reset (bitcache_filter_t* @var{filter})
@end deftypefn

@deftypefn {Function} int bitcache_filter_clear (bitcache_filter_t* @var{filter})
@end deftypefn

@deftypefn {Function} ssize_t bitcache_filter_size (bitcache_filter_t* @var{filter})
@end deftypefn

@deftypefn {Function} long bitcache_filter_count (bitcache_filter_t* @var{filter}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} bool bitcache_filter_lookup (bitcache_filter_t* @var{filter}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_filter_insert (bitcache_filter_t* @var{filter}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_filter_compare (bitcache_filter_t* @var{filter1}, bitcache_filter_t* @var{filter2})
@end deftypefn

@deftypefn {Function} int bitcache_filter_merge (bitcache_filter_t* @var{filter0}, bitcache_filter_op_t @var{op}, bitcache_filter_t* @var{filter1}, bitcache_filter_t* @var{filter2})
@end deftypefn

@deftypefn {Function} int bitcache_filter_load (bitcache_filter_t* @var{filter}, int @var{fd})
@end deftypefn

@deftypefn {Function} int bitcache_filter_dump (bitcache_filter_t* @var{filter}, int @var{fd})
@end deftypefn

@comment ---------------------------------------------------------------------

@section Using Sets
@findex bitcache_set_t

@deftypefn {Function} int bitcache_set_init (bitcache_set_t* @var{set}, free_func_t @var{id_destroy_func})
@end deftypefn

@deftypefn {Function} int bitcache_set_reset (bitcache_set_t* @var{set})
@end deftypefn

@deftypefn {Function} int bitcache_set_clear (bitcache_set_t* @var{set})
@end deftypefn

@deftypefn {Function} long bitcache_set_count (bitcache_set_t* @var{set})
@end deftypefn

@deftypefn {Function} bool bitcache_set_lookup (bitcache_set_t* @var{set}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_set_insert (bitcache_set_t* @var{set}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_set_remove (bitcache_set_t* @var{set}, bitcache_id_t* @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_set_replace (bitcache_set_t* @var{set}, bitcache_id_t* @var{id1}, bitcache_id_t* @var{id2})
@end deftypefn

@subsection Iterating Sets
@findex bitcache_set_iter_t

@deftypefn {Function} int bitcache_set_iter_init (bitcache_set_iter_t* @var{iter}, bitcache_set_t* @var{set})
@end deftypefn

@deftypefn {Function} bool bitcache_set_iter_next (bitcache_set_iter_t* @var{iter}, bitcache_id_t** @var{id})
@end deftypefn

@deftypefn {Function} int bitcache_set_iter_remove (bitcache_set_iter_t* @var{iter})
@end deftypefn

@deftypefn {Function} int bitcache_set_iter_done (bitcache_set_iter_t* @var{iter})
@end deftypefn

@comment *********************************************************************
@node Glossary
@unnumbered Glossary
@table @dfn

@item archive
@cindex archive
TODO

@item assertion
@findex assert
TODO

@item atomicity
TODO

@item big-O notation
see @emph{time complexity}.

@item block
@cindex block
a block of data.

@item Bloom filter
@cindex Bloom filter
a space-efficient probabilistic data structure used to test whether an
element is a member of a set; false positives are possible, but false
negatives are not.

@item content addressable
@cindex content addressable
TODO

@item content-addressable storage (CAS)
@cindex content-addressable storage
TODO

@item cryptography
TODO

@item digest
@cindex digest
TODO

@item @code{errno}
@findex errno
on POSIX systems, a thread-local integer variable containing the error
number set by a failed library call or system call.

@item fingerprint
TODO

@item GLib
TODO

@item hash code
TODO

@item hash collision
TODO

@item hexadecimal
a numerical notation with base 16 instead of base 10.

@item identifier
@cindex identifier
TODO

@item index
@cindex index
TODO

@item list
@cindex list
an ordered collection.

@item map
@cindex map
TODO

@item MD5
@cindex MD5
TODO

@item octal
a numerical notation with base 16 instead of base 10.

@item OpenSSL
TODO

@item queue
@cindex queue
an ordered collection supporting element insertion at the back of the
collection and element removal at the front, thus constituting a
first-in-first-out (FIFO) data structure.

@item set
@cindex set
TODO

@item set difference
@cindex set operation
the difference of two sets is the set of all elements which are members of
the first set but not members of the second set.

@item set intersection
@cindex set operation
the intersection of two sets is the set of all elements which are members of
both sets.

@item set union
@cindex set operation
the union of two sets is the set of all elements which are members of either
set.

@item SHA-1
@cindex SHA-1
TODO

@item SHA-2
@cindex SHA-2
TODO

@item SHA-224
TODO

@item SHA-256
@cindex SHA-256
TODO

@item SHA-384
TODO

@item SHA-512
TODO

@item time complexity
@cindex time complexity
a quantification of the amount of time taken by an algorithm to run as a
function of the size of the input to the problem.

@item Unlicense
a standard template for public-domain dedications; see @url{http://unlicense.org/}.

@end table
@comment *********************************************************************

@node Concept Index
@unnumbered Concept Index
@printindex cp

@comment *********************************************************************

@node Function and Type Index
@unnumbered Function and Type Index
@printindex fn

@comment *********************************************************************

@bye
